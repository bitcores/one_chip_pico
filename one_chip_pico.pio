.program one_chip_pico

loop:
; listen on the ROMCE pin
    wait 1 gpio 26
    ; set data pins as input to avoid bus conflict
    mov osr, null
    out pindirs, 8
    wait 0 gpio 26
; when it goes low read all the pins
    in pins, 15
    push
; wait until data comes back and out it on the out pins
    pull
    out pins, 8
    ; set data pins as output
    mov osr, ~null
    out pindirs, 8
    jmp loop


% c-sdk {
static inline void one_chip_pico_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = one_chip_pico_program_get_default_config(offset);
    
    sm_config_set_in_pins(&c, pin+8);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+8, 19, false);

    sm_config_set_out_pins(&c, pin, 8);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true);

    for (int g = 0; g < 28; g++) {
        if (g >= 23 && g <= 25) 
            continue;
        pio_gpio_init(pio, g);
    }

    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, true, false, 32);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}